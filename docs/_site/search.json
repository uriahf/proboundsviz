[
  {
    "objectID": "reference/preview.html",
    "href": "reference/preview.html",
    "title": "preview",
    "section": "",
    "text": "preview(ast, max_depth=999, compact=False, as_string=False)\nPrint a friendly representation of a griffe object (e.g.Â function, docstring)\n\n\n&gt;&gt;&gt; from quartodoc import get_object\n&gt;&gt;&gt; obj = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; preview(obj.docstring.parsed)\n...\n&gt;&gt;&gt; preview(obj)\n...",
    "crumbs": [
      "Some functions",
      "preview"
    ]
  },
  {
    "objectID": "reference/preview.html#examples",
    "href": "reference/preview.html#examples",
    "title": "preview",
    "section": "",
    "text": "&gt;&gt;&gt; from quartodoc import get_object\n&gt;&gt;&gt; obj = get_object(\"quartodoc\", \"get_object\")\n&gt;&gt;&gt; preview(obj.docstring.parsed)\n...\n&gt;&gt;&gt; preview(obj)\n...",
    "crumbs": [
      "Some functions",
      "preview"
    ]
  },
  {
    "objectID": "reference/get_object.html",
    "href": "reference/get_object.html",
    "title": "get_object",
    "section": "",
    "text": "get_object(\n    path,\n    object_name=None,\n    parser='numpy',\n    load_aliases=True,\n    dynamic=False,\n    loader=None,\n)\nFetch a griffe object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npath\nstr\nAn import path to the object. This should have the form path.to.module:object. For example, quartodoc:get_object or quartodoc:MdRenderer.render.\nrequired\n\n\nobject_name\n'str | None'\n(Deprecated). A function name.\nNone\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse\n\n\n\n\n\n\npreview: print a user-friendly preview of a griffe object.\n\n\n\n&gt;&gt;&gt; get_function(\"quartodoc\", \"get_function\")\n&lt;Function('get_function', ...\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nx\ndc.Object\nabc",
    "crumbs": [
      "Some functions",
      "get_object"
    ]
  },
  {
    "objectID": "reference/get_object.html#parameters",
    "href": "reference/get_object.html#parameters",
    "title": "get_object",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\npath\nstr\nAn import path to the object. This should have the form path.to.module:object. For example, quartodoc:get_object or quartodoc:MdRenderer.render.\nrequired\n\n\nobject_name\n'str | None'\n(Deprecated). A function name.\nNone\n\n\nparser\nstr\nA docstring parser to use.\n'numpy'\n\n\nload_aliases\n\nFor aliases that were imported from other modules, should we load that module?\nTrue\n\n\ndynamic\n\nWhether to dynamically import object. Useful if docstring is not hard-coded, but was set on object by running python code.\nFalse",
    "crumbs": [
      "Some functions",
      "get_object"
    ]
  },
  {
    "objectID": "reference/get_object.html#see-also",
    "href": "reference/get_object.html#see-also",
    "title": "get_object",
    "section": "",
    "text": "preview: print a user-friendly preview of a griffe object.",
    "crumbs": [
      "Some functions",
      "get_object"
    ]
  },
  {
    "objectID": "reference/get_object.html#examples",
    "href": "reference/get_object.html#examples",
    "title": "get_object",
    "section": "",
    "text": "&gt;&gt;&gt; get_function(\"quartodoc\", \"get_function\")\n&lt;Function('get_function', ...",
    "crumbs": [
      "Some functions",
      "get_object"
    ]
  },
  {
    "objectID": "reference/get_object.html#returns",
    "href": "reference/get_object.html#returns",
    "title": "get_object",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\nx\ndc.Object\nabc",
    "crumbs": [
      "Some functions",
      "get_object"
    ]
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Functions to inspect docstrings.\n\n\n\nproboundsviz.create_probounds_table",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/index.html#some-functions",
    "href": "reference/index.html#some-functions",
    "title": "Function reference",
    "section": "",
    "text": "Functions to inspect docstrings.\n\n\n\nproboundsviz.create_probounds_table",
    "crumbs": [
      "Function reference"
    ]
  },
  {
    "objectID": "reference/proboundsviz.html",
    "href": "reference/proboundsviz.html",
    "title": "proboundsviz",
    "section": "",
    "text": "proboundsviz\nproboundsviz",
    "crumbs": [
      "Some functions",
      "proboundsviz"
    ]
  },
  {
    "objectID": "reference/proboundsviz.create_probounds_table.html",
    "href": "reference/proboundsviz.create_probounds_table.html",
    "title": "proboundsviz.create_probounds_table",
    "section": "",
    "text": "proboundsviz.create_probounds_table\nproboundsviz.create_probounds_table(raw_data, datatype)",
    "crumbs": [
      "Some functions",
      "proboundsviz.create_probounds_table"
    ]
  },
  {
    "objectID": "example.html",
    "href": "example.html",
    "title": "Example usage",
    "section": "",
    "text": "To use proboundsviz in a project:\n\nimport proboundsviz.proboundsviz as pbv\n\n# print(proboundsviz.__version__)\n\n\nimport probounds.probounds as pb\nimport pandas as pd\nimport numpy as np\n\ndf_observed = pd.DataFrame({\n    'trt': np.concatenate([np.repeat(1, 1400), np.repeat(0, 600)] * 2)  ,\n    'outcome': [1] * 378 + [0] * 1022 + [1] * 420 + [0] * 180 +\n            [1] * 980 + [0] * 420 + [1] * 420 + [0] * 180,\n    'sex': ['Female'] * 2000 + ['Male']* 2000\n})\n\ndf_experimental = pd.DataFrame({\n    'trt': np.concatenate([np.repeat(1, 1000), np.repeat(0, 1000)] * 2)  ,\n    'outcome': [1] * 489  + [0] * 511 + [1] * 210 + [0] * 790 +\n            [1] * 490 + [0] * 510 + [1] * 210 + [0] * 790,\n    'sex': ['Female'] * 2000 + ['Male']* 2000\n})\n\n\n# pbv.render_probounds_crosstab(probounds_crosstab_observed, 'observational')\n\npbv.create_probounds_table(df_observed, 'observational')\n\n\n    \n    \n    \n    \n    \n\n\n\n\n\n\npbv.create_probounds_table(df_experimental, 'experimental')"
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "",
    "section": "",
    "text": "jchvhmttv ../CHANGELOG.md"
  }
]